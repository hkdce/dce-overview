{"version":3,"sources":["data/Data.ts","components/GoogleMap.tsx","components/GoogleMapGeoJSONOverlay.tsx","Actions.ts","DistrictMap.tsx","DistrictTable.tsx","DistrictSelectPane.tsx","DCCAPanel.tsx","components/ItemsDropdown.tsx","DistrictSelector.tsx","Menu.tsx","App.tsx","Reducers.ts","serviceWorker.ts","index.tsx"],"names":["districtColors","loadTopoJson","topo","objects","geometries","map","geo","feature","reduce","output","properties","hasOwnProperty","console","error","Error","districtCode","substring","push","districtOverlays","2015","require","2019","districtNames","districtInfos","dccaList","candidates","LatLngBounds","google","maps","GoogleMapContext","React","createContext","GoogleMap","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","lastPanTo","Map","refs","mapCanvas","center","lat","lng","zoom","setState","react_default","a","createElement","Fragment","ref","style","height","Provider","value","children","prevProps","e","panTo","offsetWidth","offsetHeight","getClientRects","length","bbox","bounds","fitBounds","Component","tinycolor","isFeatureMatching","featureProperty","getProperty","GoogleMapGeoJSONOverlay","data","createDataObjectFromProp","setMap","unbindAll","componentDidGeoJsonUpdate","componentDidSelectedFeatureUpdate","geojsons","forEach","remove","bind","geojson","addGeoJson","_this2","selectedFeatureProperty","prevSelectedFeatureProperty","f","changeFeatureStyle","currentSelectedFeatureProperty","nextMap","visible","context","getMap","currentStyle","getStyle","fillColor","color","setStyle","Data","strokeWeight","fillOpacity","addListener","onMouseOver","onMouseOut","onClick","event","highlightOnMouseOver","onFeatureClick","isMouseOver","isSelectedFeature","defaultFillColor","brighten","overrideStyle","revertStyle","contextType","selectPage","createAction","selectDistrict","selectDCCA","getColorFromDistrictCode","colorIndex","charCodeAt","DistrictMap","overlay","selectedDistrict","values","flat","startsWith","Math","min","max","calculateBboxOfSelectedDistrict","districtOverlay","components_GoogleMap","undefined","keys","components_GoogleMapGeoJSONOverlay","key","selectedDCCA","caCode","dispatch","ConnectedDistrictMap","connect","district","dcca","forwardRef","tableOptions","defaultSortName","defaultSortOrder","ConnectedDistrictTable","districtInfo","filter","flatMap","selectRowProp","mode","bgColor","clickToSelect","selected","onSelect","row","isSelected","lib","condensed","options","selectRow","version","isKey","dataField","dataSort","DistrictSelectPane","districtMapRef","createRef","current","forceUpdate","Tabs_default","defaultActiveKey","id","onTabUpdate","Tab_default","tabClassName","eventKey","title","src_DistrictMap","src_DistrictTable","ConnectedDCCAPanel","selectedDcca","dccaInfo","Card_default","Header","CACODE","CNAME","ENAME","Body","c","margin","name","yearOfBirth","Date","getFullYear","gender","camp","politicalAffiliation","isUncontested","votes","votePercentage","toFixed","isMobile","Android","navigator","userAgent","match","BlackBerry","iOS","Opera","Windows","any","ItemsDropdown","selectedKey","items","ReferenceError","className","onChange","target","itemOrder","k","renderNativeSelect","Dropdown_default","role","Toggle","size","variant","Menu","Item","renderBootstrapDropdown","districtItems","assign","districtItemsOrder","sort","ConnectedDistrictSelector","components_ItemsDropdown","newItemKey","ConnectedMenu","page","Navbar_default","bg","expand","Brand","href","Nav_default","y","Link","active","src_DistrictSelector","ConnectedApp","src_Menu","Container_default","fluid","Row_default","Col_default","src_DistrictSelectPane","md","src_DCCAPanel","initialState","reducers","createReducer","_createReducer","defineProperty","type","action","payload","Boolean","window","location","hostname","ReduxQuerySync","default","store","configureStore","reducer","Reducers","params","selector","defaultValue","initialTruth","ReactDOM","render","es","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bdc2c52c.chunk.js","sourcesContent":["import { feature } from 'topojson';\nimport { DistrictOverlay, DistrictNames, DistrictInfo } from '../Types';\n\nexport const districtColors: string[] = [ '#544171', '#87D84A', '#CE572B', '#71D0C9', '#CC53D3', '#C59C76', '#5A8237', '#466158', '#D4B743', '#7199C7', '#C14088', '#7A6DCE', '#62471F', '#91D593', '#BF4C57', '#CC8BB9', '#C4BEBE', '#512834' ];\n\nconst loadTopoJson = (topo: any): DistrictOverlay => {\n  const features: GeoJSON.Feature[] = topo.objects['-'].geometries.map((geo: any) => feature(topo, geo));\n\n  return features.reduce((output, feature) => { // Group by CACODE first letter.\n    if (feature == null || feature.properties == null || !feature.properties.hasOwnProperty('CACODE')) {\n      console.error('Bad GeoJSON feature', feature);\n      throw Error('Bad GeoJSON feature' + feature);\n    }\n    const caCode: string = feature.properties['CACODE'];\n    const districtCode = caCode.substring(0, 1);\n    if (output.hasOwnProperty(districtCode)) {\n      output[districtCode].push(feature);\n    } else {\n      output[districtCode] = [ feature ];\n    }\n    return output;\n  }, {} as DistrictOverlay);\n};\n\nexport const districtOverlays: { [page: string]: DistrictOverlay } = {\n  '2015': loadTopoJson(require('./dcca_2015-topo.json')),\n  '2019': loadTopoJson(require('./dcca_2019-topo.json'))\n};\n\nexport const districtNames: DistrictNames = require('./districts_name.json');\n\nexport const districtInfos: { [page: string]: DistrictInfo } = {\n  '2015': { dccaList: require('./dcca_2015.json'), candidates: require('./candidates_2015.json') },\n  '2019': { dccaList: require('./dcca_2019.json') }\n};\n","/// <reference types=\"googlemaps\" />\n\nimport React from 'react';\nimport { BBox } from 'geojson';\n\ndeclare const google: any;\nconst LatLngBounds = google.maps.LatLngBounds;\n\ntype State = {\n  map: google.maps.Map | null;\n  lastPanTo: [ string, BBox ] | null;\n}\n\ntype OwnProps = {\n  panTo?: [ string, BBox ]; // The first element is the pan id to avoid panning twice.\n}\n\ntype Props = OwnProps;\n\nexport const GoogleMapContext = React.createContext<google.maps.Map | null>(null);\n\nconst isVisible = (e: HTMLElement): boolean => {\n  return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length);\n}\n\nclass GoogleMap extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      map: null,\n      lastPanTo: null\n\t\t};\n  }\n\n  componentDidMount() {\n    if (!this.state.map) {\n      const mapOptions = {\n        center: { lat: 22.3300, lng: 114.1880 },\n        zoom: 11,\n      };\n      const map = new google.maps.Map(this.refs.mapCanvas as Element, mapOptions);\n      this.setState({ map });\n    }\n  }\n\n  render() {\n\t\treturn (\n      <React.Fragment>\n        <div ref=\"mapCanvas\" style={{height: \"100%\"}}></div>\n        <GoogleMapContext.Provider value={this.state.map}>{this.props.children}</GoogleMapContext.Provider>\n      </React.Fragment>\n\t\t);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (!this.props.panTo || (this.state.lastPanTo && this.props.panTo[0] === this.state.lastPanTo[0])) return;\n    if (!this.state.map) return;\n    if (!this.refs.mapCanvas || !isVisible(this.refs.mapCanvas as HTMLElement)) return;\n\n    this.panTo(this.state.map, this.props.panTo[1]);\n    this.setState({\n      lastPanTo: this.props.panTo\n    });\n  }\n\n  private panTo(map: google.maps.Map, bbox: BBox) {\n    const bounds = new LatLngBounds({lat: bbox[1], lng: bbox[0]}, {lat: bbox[3], lng: bbox[2]});\n    map.fitBounds(bounds, 0);\n  }\n}\n\nexport default GoogleMap;\n","/// <reference types=\"googlemaps\" />\n/// <reference types=\"geojson\" />\n\nimport React from 'react';\nimport { GoogleMapContext } from './GoogleMap';\n\ndeclare const google: any;\n\nconst tinycolor = require('tinycolor2');\n\ntype State = {\n  data: google.maps.Data | null;\n  selectedFeature?: google.maps.Data.Feature;\n}\n\ntype OwnProps = {\n  geojsons: GeoJSON.Feature[]; // Does not support mutating after initialization.\n  visible: boolean;\n  color?: string;\n  highlightOnMouseOver?: boolean;\n  onFeatureClick?: (feature: google.maps.Data.Feature) => void;\n  selectedFeatureProperty?: [string, string];\n}\n\ntype Props = OwnProps;\n\nconst isFeatureMatching = (feature: google.maps.Data.Feature, featureProperty: [string, string]): boolean => {\n  return feature.getProperty(featureProperty[0]) === featureProperty[1];\n}\n\nclass GoogleMapGeoJSONOverlay extends React.Component<Props, State> {\n  static contextType = GoogleMapContext;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      data: null\n    };\n  }\n\n  componentDidMount() {\n    if (!this.state.data) {\n      const data = this.createDataObjectFromProp(this.props);\n      this.setState({ data });\n    }\n  }\n\n  componentWillUnmount() {\n    if (!this.state.data) return;\n\n    this.state.data.setMap(null);\n    this.state.data.unbindAll();\n    this.setState({ data: null });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    this.componentDidGeoJsonUpdate(prevProps);\n    this.componentDidSelectedFeatureUpdate(prevProps);\n  }\n\n  componentDidGeoJsonUpdate(prevProps: Props) {\n    if (!this.state.data) return;\n    if (this.props.geojsons === prevProps.geojsons) return;\n\n    const data = this.state.data;\n    data.forEach(data.remove.bind(data));\n\n    this.props.geojsons.forEach(geojson => {\n      data.addGeoJson(geojson);\n    });\n  }\n\n  componentDidSelectedFeatureUpdate(prevProps: Props) {\n    if (!this.state.data) return;\n    if (this.props.selectedFeatureProperty === prevProps.selectedFeatureProperty) return;\n\n    const prevSelectedFeatureProperty = prevProps.selectedFeatureProperty;\n    if (prevSelectedFeatureProperty) {\n      this.state.data.forEach(f => {\n        if (isFeatureMatching(f, prevSelectedFeatureProperty)) {\n          this.changeFeatureStyle(this.state.data as google.maps.Data, f, false);\n        }\n      });\n    }\n\n    const currentSelectedFeatureProperty = this.props.selectedFeatureProperty;\n    if (currentSelectedFeatureProperty) {\n      this.state.data.forEach(f => {\n        if (isFeatureMatching(f, currentSelectedFeatureProperty)) {\n          this.changeFeatureStyle(this.state.data as google.maps.Data, f, false);\n        }\n      });\n    }\n  }\n\n  render() {\n    const data = this.state.data;\n    if (data) {\n      const nextMap: google.maps.Map = this.props.visible ? this.context : null;\n      if (data.getMap() !== nextMap) {\n        data.setMap(nextMap);\n      }\n      const currentStyle: google.maps.Data.StyleOptions = data.getStyle() as google.maps.Data.StyleOptions;\n      if (currentStyle.fillColor !== this.props.color) {\n        currentStyle.fillColor = this.props.color;\n        data.setStyle(currentStyle);\n      }\n    }\n\n    return null;\n  }\n\n  createDataObjectFromProp(props: Props) {\n    const data: google.maps.Data = new google.maps.Data();\n    props.geojsons.forEach(geojson => {\n      data.addGeoJson(geojson);\n    });\n\n    const style: google.maps.Data.StyleOptions = {\n      strokeWeight: 1.25,\n      fillOpacity: 0.3,\n    }\n    data.setStyle(style);\n\n    data.addListener('mouseover', this.onMouseOver.bind(this));\n    data.addListener('mouseout', this.onMouseOut.bind(this));\n    data.addListener('click', this.onClick.bind(this));\n\n    return data;\n  }\n\n  onMouseOver(event: google.maps.Data.MouseEvent) {\n    const data = this.state.data;\n    if (!data) return;\n\n    if (this.props.highlightOnMouseOver) {\n      this.changeFeatureStyle(data, event.feature, true);\n    }\n  }\n\n  onMouseOut(event: google.maps.Data.MouseEvent) {\n    const data = this.state.data;\n    if (!data) return;\n\n    if (this.props.highlightOnMouseOver) {\n      this.changeFeatureStyle(data, event.feature, false);\n    }\n  }\n\n  onClick(event: google.maps.Data.MouseEvent) {\n    if (this.props.onFeatureClick) {\n      this.props.onFeatureClick(event.feature);\n    }\n  }\n\n  changeFeatureStyle(data: google.maps.Data, feature: google.maps.Data.Feature, isMouseOver: boolean) {\n    const isSelectedFeature = this.props.selectedFeatureProperty ? isFeatureMatching(feature, this.props.selectedFeatureProperty) : false;\n\n    if (!isMouseOver && !isSelectedFeature) {\n      data.revertStyle(feature);\n    } else {\n      const defaultStyle = (data.getStyle() as google.maps.Data.StyleOptions);\n      const defaultFillColor = defaultStyle.fillColor;\n      const fillColor = isSelectedFeature ? tinycolor(\"yellow\") : tinycolor(defaultFillColor).brighten(20);\n      data.overrideStyle(feature, { fillColor });\n    }\n  }\n}\n\nexport default GoogleMapGeoJSONOverlay;\n","import { createAction } from 'redux-starter-kit';\n\nexport const selectPage = createAction('selectPage');\nexport const selectDistrict = createAction('selectDistrict');\nexport const selectDCCA = createAction('selectDCCA');\n","import { BBox } from 'geojson';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport GoogleMap from './components/GoogleMap';\nimport GoogleMapGeoJSONOverlay from './components/GoogleMapGeoJSONOverlay';\nimport { districtColors } from './data/Data';\nimport { DistrictOverlay, ReduxState } from './Types';\nimport { selectDCCA } from './Actions';\n\ntype StateProps = {\n  selectedDistrict: string;\n  selectedDCCA: string;\n}\n\ntype OwnProps = {\n  districtOverlay: DistrictOverlay;\n}\n\ntype DispatchProps = {\n  dispatch: Dispatch;\n}\n\ntype Props = StateProps & OwnProps & DispatchProps;\n\nconst getColorFromDistrictCode = (districtCode: string): string => {\n  var colorIndex: number = districtCode.charCodeAt(0) - 'A'.charCodeAt(0);\n\tif (districtCode >= 'I') colorIndex--;\n  if (districtCode >= 'O') colorIndex--;\n\treturn districtColors[colorIndex];\n}\n\nconst calculateBboxOfSelectedDistrict = (overlay: DistrictOverlay, selectedDistrict: string): BBox | null => {\n  var bbox: GeoJSON.BBox | null = null;\n  const features = Object.values(overlay).flat();\n  features.forEach(feature => {\n    if (!feature || !feature.properties || !feature.bbox) return;\n    if (!feature.properties['CACODE'].startsWith(selectedDistrict)) return;\n    if (!bbox) {\n      bbox = feature.bbox;\n    } else {\n      bbox = [ Math.min(bbox[0], feature.bbox[0]),\n               Math.min(bbox[1], feature.bbox[1]),\n               Math.max(bbox[2], feature.bbox[2]),\n               Math.max(bbox[3], feature.bbox[3]) ];\n    }\n  });\n\n  return bbox;\n}\n\nclass DistrictMap extends React.Component<Props> {\n  render() {\n    const bbox = calculateBboxOfSelectedDistrict(this.props.districtOverlay, this.props.selectedDistrict);\n    return (\n      <GoogleMap panTo={ bbox ? [ this.props.selectedDistrict, bbox ] : undefined }>\n        {\n          Object.keys(this.props.districtOverlay).map(districtCode =>\n            <GoogleMapGeoJSONOverlay\n              key={ districtCode }\n              geojsons={ this.props.districtOverlay[districtCode] }\n              color={ getColorFromDistrictCode(districtCode) }\n              visible={ districtCode.startsWith(this.props.selectedDistrict) }\n              highlightOnMouseOver={ true }\n              selectedFeatureProperty={ this.props.selectedDCCA.startsWith(districtCode) ? [ \"CACODE\", this.props.selectedDCCA ] : undefined }\n              onFeatureClick={ this.onFeatureClick.bind(this) }/>\n          )\n        }\n      </GoogleMap>\n    );\n  }\n\n  onFeatureClick(feature: google.maps.Data.Feature) {\n    const caCode = feature.getProperty('CACODE');\n    this.props.dispatch(selectDCCA(caCode));\n  }\n}\n\nconst mapStateToProps = (state: ReduxState): StateProps => {\n  return {\n    selectedDistrict: state.district,\n    selectedDCCA: state.dcca,\n  };\n};\n\nexport type DistrictMapType = DistrictMap;\n\nconst ConnectedDistrictMap = connect(mapStateToProps, null, null, { forwardRef: true })(DistrictMap);\nexport default ConnectedDistrictMap;\n","import React from 'react';\nimport { BootstrapTable, SelectRow, SelectRowMode, SortOrder, TableHeaderColumn } from 'react-bootstrap-table';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { DistrictInfo, ReduxState } from './Types';\nimport { selectDCCA } from './Actions';\n\nimport '../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\n\ntype StateProps = {\n  selectedDistrict: string;\n  selectedDCCA: string;\n}\n\ntype OwnProps = {\n  districtInfo: DistrictInfo;\n}\n\ntype DispatchProps = {\n  dispatch: Dispatch;\n}\n\ntype Props = StateProps & OwnProps & DispatchProps;\n\nconst tableOptions = {\n  defaultSortName: 'CACODE',\n  defaultSortOrder: 'asc' as SortOrder\n};\n\nconst DistrictTable: React.FunctionComponent<Props> = (props) => {\n  const caCodes = props.districtInfo && props.districtInfo.dccaList ? Object.keys(props.districtInfo.dccaList) : [];\n  const dccaList = caCodes\n    .filter(caCode => caCode.startsWith(props.selectedDistrict))\n    .flatMap(caCode => props.districtInfo.dccaList[caCode]);\n\n  const selectRowProp: SelectRow = {\n    mode: 'radio' as SelectRowMode,\n    bgColor: '#78deee',\n    clickToSelect: true,\n    selected: [ props.selectedDCCA ],\n    onSelect: (row, isSelected: boolean) => { if (isSelected) props.dispatch(selectDCCA(row['CACODE'])) }\n  };\n\n  return (\n    <BootstrapTable condensed={ true } data={ dccaList as object[] } options={ tableOptions } selectRow={ selectRowProp } version='4'>\n      <TableHeaderColumn isKey dataField='CACODE' dataSort={ true }>選區編號</TableHeaderColumn>\n      <TableHeaderColumn dataField='CNAME' dataSort={ true }>中文名稱</TableHeaderColumn>\n      <TableHeaderColumn dataField='ENAME' dataSort={ true }>English Name</TableHeaderColumn>\n    </BootstrapTable>\n  );\n}\n\nconst mapStateToProps = (state: ReduxState): StateProps => {\n  return {\n    selectedDistrict: state.district,\n    selectedDCCA: state.dcca\n  };\n};\n\nconst ConnectedDistrictTable = connect(mapStateToProps, null, null, { forwardRef: true })(DistrictTable);\nexport default ConnectedDistrictTable;\n","import React from 'react';\nimport Tab from 'react-bootstrap/Tab';\nimport Tabs from 'react-bootstrap/Tabs';\n\nimport { DistrictInfo, DistrictOverlay } from './Types';\nimport DistrictMap, { DistrictMapType } from './DistrictMap';\nimport DistrictTable from './DistrictTable';\n\ntype Props = {\n  districtInfo: DistrictInfo;\n  districtOverlay: DistrictOverlay;\n}\n\nclass DistrictSelectPane extends React.Component<Props> {\n  private districtMapRef: React.RefObject<DistrictMapType> = React.createRef();\n\n  onTabUpdate() {\n    if (this.districtMapRef.current) {\n      this.districtMapRef.current.forceUpdate();\n    }\n  }\n\n  render() {\n    return (\n      <Tabs defaultActiveKey=\"map\" id=\"selectDistrictPane\" onSelect={ () => this.onTabUpdate() }>\n        <Tab style={{ height: \"60vh\" }} tabClassName=\"thinTab\" eventKey=\"map\" title=\"Map\">\n          <DistrictMap ref={ this.districtMapRef } districtOverlay={ this.props.districtOverlay }/>\n        </Tab>\n        <Tab tabClassName=\"thinTab\" eventKey=\"list\" title=\"List\">\n          <DistrictTable districtInfo={ this.props.districtInfo }/>\n        </Tab>\n      </Tabs>\n    );\n  }\n}\n\nexport default DistrictSelectPane;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport { connect } from 'react-redux';\nimport { DistrictInfo, ReduxState } from './Types';\n\ntype StateProps = {\n  selectedDcca: string;\n}\n\ntype OwnProps = {\n  districtInfo: DistrictInfo;\n}\n\ntype DispatchProps = {\n}\n\ntype Props = StateProps & OwnProps & DispatchProps;\n\nconst DCCAPanel: React.FunctionComponent<Props> = (props) => {\n  if (props.selectedDcca) {\n    const dccaInfo = props.districtInfo.dccaList[props.selectedDcca];\n    const candidates = props.districtInfo.candidates ? props.districtInfo.candidates[props.selectedDcca] : [];\n\n    return (\n      <Card>\n        <Card.Header>{ dccaInfo.CACODE } - { dccaInfo.CNAME } { dccaInfo.ENAME }</Card.Header>\n        <Card.Body>\n          {\n            candidates.map(c =>\n            <div style={{ margin: \"4px 0px 4px 0px\" }}>\n              <div>{ c.name } { c.yearOfBirth ? (new Date().getFullYear() - c.yearOfBirth) + \"歲\" : \"年齡不詳\" } { c.gender }</div>\n              <div>[{ c.camp }] { c.politicalAffiliation ? c.politicalAffiliation : \"政治聯繫不明\" }</div>\n              <div>{ c.isUncontested ? \"自動當選\" : \"得票: \" + c.votes + \" \" + (c.votePercentage * 100).toFixed(1) + \"%\" }</div>\n            </div>)\n          }\n        </Card.Body>\n      </Card>\n    );\n  } else {\n    return null;\n  }\n}\n\nconst mapStateToProps = (state: ReduxState): StateProps => {\n  return {\n    selectedDcca: state.dcca,\n  };\n};\n\nconst ConnectedDCCAPanel = connect(mapStateToProps)(DCCAPanel);\nexport default ConnectedDCCAPanel;\n","import React from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nconst isMobile = {\n  Android: function() {\n      return navigator.userAgent.match(/Android/i);\n  },\n  BlackBerry: function() {\n      return navigator.userAgent.match(/BlackBerry/i);\n  },\n  iOS: function() {\n      return navigator.userAgent.match(/iPhone|iPad|iPod/i);\n  },\n  Opera: function() {\n      return navigator.userAgent.match(/Opera Mini/i);\n  },\n  Windows: function() {\n      return navigator.userAgent.match(/IEMobile/i) || navigator.userAgent.match(/WPDesktop/i);\n  },\n  any: function() {\n      return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());\n  }\n};\n\ntype Props = {\n  items: { [index: string]: string };\n  itemOrder: string[];\n  selectedKey: string;\n  className?: string;\n  onSelect: (eventKey: string, event: Object) => any;\n}\n\nconst renderNativeSelect = (props: Props) => {\n  return (\n    <select className={props.className} onChange={(event) => { props.onSelect(event.target.value, {}) }}>\n    {\n      props.itemOrder.map((k: string) =>\n        <option value={k} selected={k === props.selectedKey}>{props.items[k]}</option>\n      )\n    }\n    </select>\n  );\n}\n\nconst renderBootstrapDropdown = (props: Props) => {\n  return (\n    <Dropdown role=\"menu\" className={props.className} onSelect={props.onSelect}>\n    <Dropdown.Toggle size=\"sm\" variant=\"info\" id=\"dropdown-basic\" onSelect={props.onSelect}>\n    { props.items[props.selectedKey] }\n    </Dropdown.Toggle>\n    <Dropdown.Menu>\n    {\n      props.itemOrder.map((k: string) =>\n        <Dropdown.Item key={k} eventKey={k}>{props.items[k]}</Dropdown.Item>\n      )\n    }\n    </Dropdown.Menu>\n  </Dropdown>\n  );\n}\n\nconst ItemsDropdown: React.FunctionComponent<Props> = (props: Props) => {\n  if (!(props.selectedKey in props.items)) {\n    console.error('Selected key does not exist in items object.', props.selectedKey, props.items);\n    throw ReferenceError('Selected key does not exist in items object.');\n  }\n\n  if (isMobile.any()) {\n    return renderNativeSelect(props);\n  } else {\n    return renderBootstrapDropdown(props);\n  }\n}\n\nexport default ItemsDropdown;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { selectDistrict } from './Actions';\nimport ItemsDropdown from './components/ItemsDropdown';\nimport { DistrictNames, ReduxState } from './Types';\nimport { districtNames } from './data/Data';\n\nconst districtItems: DistrictNames = Object.assign({}, districtNames);\nfor (var key in districtItems) {\n  districtItems[key] = key + ' - ' + districtItems[key];\n}\ndistrictItems[''] = '全香港';\n\nconst districtItemsOrder = Object.keys(districtItems);\ndistrictItemsOrder.sort();\n\ntype OwnProps = {\n  className?: string;\n}\n\ntype StateProps = {\n  selectedKey: string;\n}\n\ntype DispatchProps = {\n  dispatch: Dispatch;\n}\n\ntype Props = StateProps & OwnProps & DispatchProps;\n\nconst DistrictSelector: React.FunctionComponent<Props> = (props) => {\n  return (<ItemsDropdown\n            className={ props.className }\n            items={ districtItems }\n            itemOrder={ districtItemsOrder }\n            selectedKey={ props.selectedKey }\n            onSelect={ newItemKey => props.dispatch(selectDistrict(newItemKey)) }/>);\n}\n\nconst mapStateToProps = (state: ReduxState) => {\n  return { selectedKey: state.district };\n};\n\nconst ConnectedDistrictSelector = connect(mapStateToProps)(DistrictSelector);\nexport default ConnectedDistrictSelector;\n","import React from 'react';\n// import Button from 'react-bootstrap/Button';\n// import Form from 'react-bootstrap/Form';\n// import FormControl from 'react-bootstrap/FormControl';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { selectPage } from './Actions';\nimport DistrictSelector from './DistrictSelector';\nimport { ReduxState } from './Types';\n\ntype StateProps = {\n  page: string;\n}\n\ntype DispatchProps = {\n  dispatch: Dispatch;\n}\n\ntype Props = StateProps & DispatchProps;\n\nconst Menu: React.FunctionComponent<Props> = (props: Props) => {\n  return (\n    <Navbar bg=\"light\" expand=\"sm\">\n      <Navbar.Brand href=\"#home\">區議會情報</Navbar.Brand>\n      <Nav onSelect={(eventKey: string) => props.dispatch(selectPage(eventKey))}>\n      {\n        ['2019', '2015'].map(y => <Nav.Link key={y} eventKey={y} active={ props.page === y}>{y}</Nav.Link>)\n      }\n      </Nav>\n      <DistrictSelector className=\"mr-auto\"/>\n    </Navbar>\n  );\n  /*\n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n  <Navbar.Collapse id=\"basic-navbar-nav\">\n  </Navbar.Collapse>\n  <Form inline>\n    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n    <Button variant=\"outline-success\">Search</Button>\n  </Form>\n  */\n}\n\nconst mapStateToProps = (state: ReduxState) => {\n  return { page: state.page };\n};\n\nconst ConnectedMenu = connect(mapStateToProps)(Menu);\n\nexport default ConnectedMenu;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport { connect } from 'react-redux';\n\nimport { districtOverlays, districtInfos } from './data/Data';\nimport DistrictSelectPane from './DistrictSelectPane';\nimport DCCAPanel from './DCCAPanel';\nimport Menu from './Menu';\nimport { ReduxState } from './Types';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\ntype OwnProps = {\n}\n\ntype StateProps = {\n  page: string;\n}\n\ntype DispatchProps = {\n}\n\ntype Props = StateProps & OwnProps & DispatchProps;\n\nconst App: React.FunctionComponent<Props> = (props) => {\n  const districtOverlay = props.page === '' ? {} : districtOverlays[props.page]\n\n  return (\n    <div className=\"App\">\n      <Menu/>\n      <Container fluid={true} >\n        <Row>\n          <Col className=\"thinCol\">\n            <DistrictSelectPane districtOverlay={ districtOverlay } districtInfo={ districtInfos[props.page] }/>\n          </Col>\n          <Col className=\"thinCol\" md=\"3\">\n            <DCCAPanel districtInfo={ districtInfos[props.page] }/>\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"thinCol\">\n            <Card>\n              <Card.Header>Card Title</Card.Header>\n              <Card.Body>\n                Some quick example text to build on the card title and make up the bulk of\n                the card's content.\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: ReduxState): StateProps => {\n  return {\n    page: state.page,\n  };\n};\n\nconst ConnectedApp = connect(mapStateToProps)(App);\nexport default ConnectedApp;\n","import { createReducer } from 'redux-starter-kit';\nimport { ReduxState } from './Types';\nimport { selectDistrict, selectPage, selectDCCA } from './Actions';\n\nexport const initialState: ReduxState = {\n  page: '',\n  district: '',\n  dcca: ''\n}\n\nconst reducers = createReducer<ReduxState>(initialState, {\n  [selectPage.type]: (state: ReduxState, action) => { state.page = action.payload },\n  [selectDistrict.type]: (state: ReduxState, action) => { state.district = action.payload },\n  [selectDCCA.type]: (state: ReduxState, action) => { state.dcca = action.payload }\n});\n\nexport default reducers;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { configureStore } from 'redux-starter-kit';\nimport App from './App';\nimport './index.css';\nimport Reducers, { initialState } from './Reducers';\nimport * as serviceWorker from './serviceWorker';\nimport { ReduxState } from './Types';\nimport { selectPage, selectDistrict, selectDCCA } from './Actions';\n\nconst ReduxQuerySync = require('redux-query-sync').default;\n\nconst store = configureStore({\n  reducer: Reducers\n});\n\nReduxQuerySync({\n  store, // your Redux store\n  params: {\n    page: {\n      selector: (state: ReduxState) => state.page,\n      action: (value: string) => selectPage(value),\n      defaultValue: initialState.page\n    },\n    district: {\n      selector: (state: ReduxState) => state.district,\n      action: (value: string) => selectDistrict(value),\n      defaultValue: initialState.district\n    },\n    dcca: {\n      selector: (state: ReduxState) => state.dcca,\n      action: (value: string) => selectDCCA(value),\n      defaultValue: initialState.dcca\n    },\n  },\n  // Initially set the store's state to the current location.\n  initialTruth: 'location',\n})\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}